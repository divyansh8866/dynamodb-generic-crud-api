# Flask Configuration
FLASK_ENV=development
PORT=8001

# AWS Configuration
AWS_REGION=us-east-1
AWS_ACCESS_KEY_ID=your_access_key_here
AWS_SECRET_ACCESS_KEY=your_secret_key_here

# DynamoDB Configuration
DYNAMODB_TABLE_NAME=your_table_name
DYNAMODB_ENDPOINT_URL=  # Leave empty for AWS DynamoDB
KEY_FIELD=item_id  # Primary key field name

# =============================================================================
# SCHEMA DEFINITION - Choose ONE of the following methods:
# =============================================================================

# METHOD 1: JSON File (Recommended for complex schemas)
# Create a schema.json file in your project root or specify a custom path
SCHEMA_FILE=schema.json

# METHOD 2: JSON String in Environment Variable (Good for simple schemas)
# SCHEMA_JSON={"table_name":"users","key_field":"user_id","fields":[{"name":"user_id","type":"string","required":true,"description":"User ID"},{"name":"name","type":"string","required":true,"description":"User name"}]}

# METHOD 3: Simple Colon-Separated Format (Legacy, limited features)
# Format: "field1:type:required:min:max:desc,field2:type:required:min:max:desc"
# TABLE_FIELDS=item_id:string:true:1:100:Unique identifier,name:string:true:1:100:Full name,age:integer:true:0:150:Age,address:string:true:1:500:Address

# =============================================================================
# FIELD TYPES SUPPORTED:
# =============================================================================
# string    - Text fields with min/max length and pattern validation
# integer   - Whole numbers with min/max values
# float     - Decimal numbers with min/max values
# boolean   - True/false values
# datetime  - Date and time values
# email     - Email addresses with validation
# url       - URLs with validation
# phone     - Phone numbers with validation
# uuid      - UUID strings with validation
# json      - JSON objects or arrays
# array     - Array values
# enum      - Enumerated values from a predefined list

# =============================================================================
# FIELD PROPERTIES:
# =============================================================================
# name          - Field name (required)
# type          - Field type (required)
# required      - Whether field is required (default: true)
# min_length    - Minimum length for strings
# max_length    - Maximum length for strings
# min_value     - Minimum value for numbers
# max_value     - Maximum value for numbers
# description   - Field description for documentation
# default       - Default value
# unique        - Whether field should be unique
# index         - Whether field should be indexed for queries
# enum_values   - List of allowed values for enum type
# pattern       - Regex pattern for validation
# format        - Format specification

# =============================================================================
# EXAMPLE SCHEMAS:
# =============================================================================

# Example 1: Simple Person Schema (JSON String)
# SCHEMA_JSON={"table_name":"persons","key_field":"person_id","fields":[{"name":"person_id","type":"string","required":true,"description":"Person ID"},{"name":"name","type":"string","required":true,"min_length":1,"max_length":100,"description":"Full name"},{"name":"age","type":"integer","required":false,"min_value":0,"max_value":150,"description":"Age"},{"name":"email","type":"email","required":true,"unique":true,"description":"Email address"}]}

# Example 2: Product Schema (JSON String)
# SCHEMA_JSON={"table_name":"products","key_field":"product_id","fields":[{"name":"product_id","type":"string","required":true,"description":"Product ID"},{"name":"name","type":"string","required":true,"min_length":1,"max_length":200,"description":"Product name"},{"name":"price","type":"float","required":true,"min_value":0,"description":"Price"},{"name":"category","type":"enum","required":true,"enum_values":["electronics","clothing","books"],"description":"Category"},{"name":"active","type":"boolean","required":true,"default":true,"description":"Active status"}]}

# Example 3: User Schema (JSON String)
# SCHEMA_JSON={"table_name":"users","key_field":"user_id","fields":[{"name":"user_id","type":"uuid","required":true,"description":"User ID"},{"name":"username","type":"string","required":true,"min_length":3,"max_length":50,"pattern":"^[a-zA-Z0-9_]+$","unique":true,"description":"Username"},{"name":"email","type":"email","required":true,"unique":true,"description":"Email"},{"name":"role","type":"enum","required":true,"enum_values":["user","admin"],"default":"user","description":"User role"}]}

# API Configuration
API_KEY=your_api_key_here  # For API authentication 